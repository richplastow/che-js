// Generated by CoffeeScript 1.9.1

/*! CheJS 0.0.6-3 //// MIT licence //// che-js.richplastow.com //// */

(function() {
  var A, Che, E, F, I, O, S, U, VERSION, env, log, properties, simplify, toType, validate;

  I = 'CheJS';

  VERSION = '0.0.6-3';

  A = 'array';

  E = 'error';

  F = 'function';

  O = 'object';

  S = 'string';

  U = 'undefined';

  env = {
    has: {}
  };

  env.has.global = O === typeof global;

  env.has.window = !(O !== typeof window || (env.has.global && global.window));

  env.global = env.has.global && !env.has.window ? global : this;

  log = console.log.bind(console);

  toType = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  simplify = function(value) {
    switch (toType(value)) {
      case S:
        return value;
      case U:
      case 'null':
        return "[" + value + "]";
      case E:
        return (location(value)) + " " + value.message;
      case A:
        return "[.." + value.length + "..]";
      case F:
        return "[function]";
      default:
        return "" + value;
    }
  };

  properties = function() {
    var key, out, value;
    out = [];
    for (key in this) {
      value = this[key];
      if (F !== toType(value)) {
        out.push(key + ":" + (simplify(value)));
      }
    }
    return out.join('  ');
  };

  validate = function(subject, rules) {
    var errors, i, key, len, mand, rule, test, type, value;
    if (O !== toType(subject)) {
      return ["`subject` is type '" + (toType(subject)) + "' not 'object'"];
    }
    errors = [];
    for (i = 0, len = rules.length; i < len; i++) {
      rule = rules[i];
      key = rule[0], mand = rule[1], type = rule[2], test = rule[3];
      value = subject[key];
      if (void 0 === value) {
        if (mand) {
          errors.push("Key '" + key + "' is mandatory");
        } else {
          continue;
        }
      } else if (type !== toType(value)) {
        errors.push("Key '" + key + "' is type '" + (toType(value)) + "' not '" + type + "'");
      } else if (!test.test(value)) {
        errors.push("Key '" + key + "' fails " + (test.toString()));
      }
    }
    if (errors.length) {
      return errors;
    }
  };

  Che = (function() {
    Che.prototype.I = 'Che';

    Che.prototype.toString = function(renderer) {
      if (renderer) {
        return renderer.call(this);
      } else {
        return "[object " + this.I + "]";
      }
    };

    function Che(opt) {
      if (opt == null) {
        opt = {};
      }
    }

    Che.prototype.reconnect = function() {};

    return Che;

  })();

  if (F === typeof define && define.amd) {
    define(function() {
      return Che;
    });
  } else if (O === typeof module && module && module.exports) {
    module.exports = Che;
  } else {
    env.global.Che = Che;
  }

}).call(this);
