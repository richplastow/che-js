// Generated by CoffeeScript 1.8.0

/*! CheJS 0.0.2 //// MIT licence //// che-js.richplastow.com //// */

(function() {
  var Che, log, properties, simplify, toType, validate;

  log = console.log.bind(console);

  toType = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  simplify = function(value) {
    switch (toType(value)) {
      case 'string':
        return value;
      case 'undefined':
      case 'null':
        return "[" + value + "]";
      case 'error':
        return "" + (location(value)) + " " + value.message;
      case 'array':
        return "[.." + value.length + "..]";
      case 'function':
        return "[function]";
      default:
        return "" + value;
    }
  };

  properties = function() {
    var key, out, value;
    out = [];
    for (key in this) {
      value = this[key];
      if ('function' !== toType(value)) {
        out.push("" + key + ":" + (simplify(value)));
      }
    }
    return out.join('  ');
  };

  validate = function(subject, rules) {
    var errors, key, mand, rule, test, type, value, _i, _len;
    if ('object' !== toType(subject)) {
      return ["`subject` is type '" + (toType(subject)) + "' not 'object'"];
    }
    errors = [];
    for (_i = 0, _len = rules.length; _i < _len; _i++) {
      rule = rules[_i];
      key = rule[0], mand = rule[1], type = rule[2], test = rule[3];
      value = subject[key];
      if (void 0 === value) {
        if (mand) {
          errors.push("Key '" + key + "' is mandatory");
        } else {
          continue;
        }
      } else if (type !== toType(value)) {
        errors.push("Key '" + key + "' is type '" + (toType(value)) + "' not '" + type + "'");
      } else if (!test.test(value)) {
        errors.push("Key '" + key + "' fails " + (test.toString()));
      }
    }
    if (errors.length) {
      return errors;
    }
  };

  Che = (function() {
    Che.prototype.I = 'Che';

    Che.prototype.toString = function(renderer) {
      if (renderer) {
        return renderer.call(this);
      } else {
        return "[object " + this.I + "]";
      }
    };

    function Che(opt) {
      if (opt == null) {
        opt = {};
      }
    }

    Che.prototype.reconnect = function() {};

    return Che;

  })();

  window.Che = Che;

}).call(this);
